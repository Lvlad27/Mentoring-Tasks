/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 16.0 		*/
/*  Created On : 20-Oct-2022 15:16:04 				*/
/*  DBMS       : MySql 						*/
/* ---------------------------------------------------- */

SET FOREIGN_KEY_CHECKS=0
; 
/* Drop Views */

DROP VIEW IF EXISTS `movies_by_genre` CASCADE
;

DROP VIEW IF EXISTS `movies_by_year_2022` CASCADE
;

DROP VIEW IF EXISTS `movies_robert_de_niro` CASCADE
;

/* Drop Tables */

DROP TABLE IF EXISTS `actor` CASCADE
;

DROP TABLE IF EXISTS `director` CASCADE
;

DROP TABLE IF EXISTS `genre` CASCADE
;

DROP TABLE IF EXISTS `movie` CASCADE
;

DROP TABLE IF EXISTS `movie_cast` CASCADE
;

DROP TABLE IF EXISTS `movie_m2m_director` CASCADE
;

DROP TABLE IF EXISTS `movie_m2m_genre` CASCADE
;

DROP TABLE IF EXISTS `rating` CASCADE
;

DROP TABLE IF EXISTS `reviewer` CASCADE
;

/* Drop Stored Procedures */

DROP PROCEDURE IF EXISTS `movies_by_country`
;

/* Create Tables */

CREATE TABLE `actor`
(
	`act_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`act_fname` CHAR(20) NULL,
	`act_lname` CHAR(20) NULL,
	`act_gender` CHAR(1) NULL,
	CONSTRAINT `PK_actor` PRIMARY KEY (`act_id` ASC)
)
COMMENT = '	- act_id – this is a unique ID for each actor
	- act_fname – this is the first name of each actor
	- act_lname – this is the last name of each actor
	- act_gender – this is the gender of each actor'

;

CREATE TABLE `director`
(
	`dir_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`dir_fname` CHAR(20) NULL,
	`dir_lname` CHAR(20) NULL,
	CONSTRAINT `PK_director` PRIMARY KEY (`dir_id` ASC)
)
COMMENT = '	- dir_id – this is a unique ID for each director
	- dir_fname – this is the first name of the director
	- dir_lname – this is the last name of the director'

;

CREATE TABLE `genre`
(
	`gen_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`gen_title` CHAR(20) NULL,
	CONSTRAINT `PK_genre` PRIMARY KEY (`gen_id` ASC)
)
COMMENT = '	- gen_id – this is a unique ID for each genre
	- gen_title – this is the description of the genre'

;

CREATE TABLE `movie`
(
	`mov_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`mov_title` CHAR(50) NULL,
	`mov_year` INT NULL,
	`mov_time` INT NULL,
	`mov_lang` CHAR(50) NULL,
	`mov_rel_dt` DATE NULL,
	`mov_rel_country` CHAR(5) NULL,
	`gen_id` INT NULL,
	CONSTRAINT `PK_movie` PRIMARY KEY (`mov_id` ASC)
)
COMMENT = '	- mov_id – this is the unique ID for each movie
	- mov_title – this column represents the name of the movie
	- mov_year – this is the year of making the movie
	- mov_time – duration of the movie i.e. how long it was running
	- mov_lang – the language in which movie was casted
	- mov_dt_rel – this is the release date of the movie
	- mov_rel_country – this is the name of the country(s) where the movie was released'

;

CREATE TABLE `movie_cast`
(
	`act_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`mov_id` INT UNSIGNED NOT NULL,
	`role` CHAR(30) NULL,
	CONSTRAINT `PK_movie_cast` PRIMARY KEY (`act_id` ASC, `mov_id` ASC)
)
COMMENT = '	- act_id – this is ID of actor, which is referencing the act_id column of actor table
	- mov_id – this is the ID of the movie, which is referencing the mov_id column of the table movie
	- role – this is the name of a character in the movie, an actor acted for that character'

;

CREATE TABLE `movie_m2m_director`
(
	`dir_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`mov_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	CONSTRAINT `PK_movie_m2m_director` PRIMARY KEY (`dir_id` ASC, `mov_id` ASC)
)
COMMENT = '	- dir_id – this is the ID for each director, which is referencing the dir_id column of the table director
	- mov_id – this is the ID of the movie, which is referencing the mov_id column of the table movie'

;

CREATE TABLE `movie_m2m_genre`
(
	`mov_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`gen_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	CONSTRAINT `PK_movie genre` PRIMARY KEY (`mov_id` ASC, `gen_id` ASC)
)
COMMENT = '	- mov_id – this is the ID of the movie, which is referencing the mov_id column of the table movie
	- gen_id – this is the ID of each genres, which is referencing the gen_id column of the table genre'

;

CREATE TABLE `rating`
(
	`mov_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`rev_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`rev_stars` INT NULL,
	`num_o_ratings` INT NULL,
	CONSTRAINT `PK_rating` PRIMARY KEY (`mov_id` ASC, `rev_id` ASC)
)
COMMENT = '	- mov_id –this is the ID of the movie, which is referencing the mov_id column of the table movie
	- rev_id – this is the ID of the reviewer, which is referencing the rev_id column of the table reviewer
	- rev_stars – this is indicates how many stars a reviewer rated for a review of a movie
	- num_o_rating – this indicates how many ratings a movie achieved till date'

;

CREATE TABLE `reviewer`
(
	`rev_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`rev_fname` CHAR(20) NULL,
	`rev_lname` CHAR(20) NULL,
	CONSTRAINT `PK_reviewer` PRIMARY KEY (`rev_id` ASC)
)
COMMENT = '	- rev_id – this is the unique ID for each reviewer
	- rev_name – this is the name of the reviewer'

;

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE `movie` 
 ADD CONSTRAINT `CHK_max_duration` CHECK (ALTER TABLE
ADD CHECK(mov_time<5))
;

ALTER TABLE `movie_cast` 
 ADD INDEX `IDXFK_movie_cast_act_id` (`act_id` ASC)
;

ALTER TABLE `movie_cast` 
 ADD INDEX `IDXFK_movie_cast_mov_id` (`mov_id` ASC)
;

ALTER TABLE `movie_m2m_director` 
 ADD INDEX `IDXFK_movie_m2m_director_dir_id` (`dir_id` ASC)
;

ALTER TABLE `movie_m2m_director` 
 ADD INDEX `IDXFK_movie_m2m_director_mov_id` (`mov_id` ASC)
;

ALTER TABLE `movie_m2m_genre` 
 ADD INDEX `IDXFK_movie_m2m_genre_gen_id` (`gen_id` ASC)
;

ALTER TABLE `movie_m2m_genre` 
 ADD INDEX `IDXFK_movie_m2m_genre_mov_id` (`mov_id` ASC)
;

ALTER TABLE `rating` 
 ADD CONSTRAINT `CHK_max_rating` CHECK (ALTER TABLE rating
ADD CHECK (rev_stars<=5) )
;

ALTER TABLE `rating` 
 ADD INDEX `IDXFK_rating_mov_id` (`mov_id` ASC)
;

ALTER TABLE `rating` 
 ADD INDEX `IDXFK_rating_rev_id` (`rev_id` ASC)
;

DELIMITER //
CREATE TRIGGER `TRG_upd_num_o_ratings_after_ins`
AFTER INSERT 
ON `rating` FOR EACH ROW 
SET 
`num_o_ratings` = `num_o_ratings` + 1
END 
//
DELIMITER ;
;

/* Create Foreign Key Constraints */

ALTER TABLE `movie_cast` 
 ADD CONSTRAINT `FK_movie_cast_actor`
	FOREIGN KEY (`act_id`) REFERENCES `actor` (`act_id`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `movie_cast` 
 ADD CONSTRAINT `FK_movie_cast_mov_id`
	FOREIGN KEY (`mov_id`) REFERENCES `movie` (`mov_id`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `movie_m2m_director` 
 ADD CONSTRAINT `FK_movie_m2m_director_dir_id`
	FOREIGN KEY (`dir_id`) REFERENCES `director` (`dir_id`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `movie_m2m_director` 
 ADD CONSTRAINT `FK_movie_m2m_director_mov_id`
	FOREIGN KEY (`mov_id`) REFERENCES `movie` (`mov_id`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `movie_m2m_genre` 
 ADD CONSTRAINT `FK_movie_m2m_genre_gen_id`
	FOREIGN KEY (`gen_id`) REFERENCES `genre` (`gen_id`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `movie_m2m_genre` 
 ADD CONSTRAINT `FK_movie_m2m_genre_mov_id`
	FOREIGN KEY (`mov_id`) REFERENCES `movie` (`mov_id`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `rating` 
 ADD CONSTRAINT `FK_rating_mov_id`
	FOREIGN KEY (`mov_id`) REFERENCES `movie` (`mov_id`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `rating` 
 ADD CONSTRAINT `FK_rating_rev_id`
	FOREIGN KEY (`rev_id`) REFERENCES `reviewer` (`rev_id`) ON DELETE Cascade ON UPDATE Cascade
;

SET FOREIGN_KEY_CHECKS=1
; 
/* Create Views */

CREATE OR REPLACE VIEW `movies_by_genre` AS 
SELECT mov_title, mov_year, gen_title
FROM movie
NATURAL JOIN movie_genres
NATURAL JOIN genres;
;


CREATE VIEW `movies_by_genre` AS
SELECT `mov_id`,
	   `mov_title`,
	   `mov_year`,
	   `mov_time`,
	   `mov_lang`,
	   `mov_rel_dt`,
	   `mov_rel_country`,
	FROM `movie`
WHERE `mov_year` IN ('2022')
;


CREATE OR REPLACE VIEW `movies_robert_de_niro` AS 
SELECT act_id
FROM actor 
WHERE act_fname='Robert' 
AND act_lname='De Niro';
;


/* Create Stored Procedures */

DELIMITER //
CREATE PROCEDURE movies_by_country @Country char(50)
AS
SELECT * FROM movie WHERE mov_rel_country=@Country
GO;
//
DELIMITER ;

;
